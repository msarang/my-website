{"version":3,"sources":["Components/Animation.js","Components/StarBackground.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","wrapperRef","React","createRef","this","current","classList","toggle","ref","className","wrapper","onClick","handleClick","cardtitle","Component","StarBackground","Fragment","Row","fluid","Col","class","Home","Container","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAGqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,WAAaC,IAAMC,YAFT,E,0DAMCC,KAAKH,WAAWI,QACxBC,UAAUC,OAAO,iB,+BAGnB,IAAD,OACL,OACI,6BACA,6BACI,yBAAKC,IAAKJ,KAAKH,WAAYQ,UAAWL,KAAKJ,MAAMU,SAC7C,yBAAKD,UAAU,OACX,yBAAKA,UAAU,aAAf,4CAII,6BACA,6BALJ,+MAUI,6BACA,6BAXJ,kRAiBI,6BACA,6BAlBJ,gPAuBI,6BACA,iCAOpB,4BACIA,UAAU,YACVE,QAAS,kBAAM,EAAKC,gBAAgBR,KAAKJ,MAAMa,gB,GAlDzBC,cCqDnBC,E,uKA/CX,OACI,kBAAC,IAAMC,SAAP,KAGA,kBAACC,EAAA,EAAD,CAAKR,UAAU,OAAOS,OAAK,GAEvB,kBAACC,EAAA,EAAD,CAAKV,UAAU,eACX,kBAAC,EAAD,CACIC,QAAQ,oBACRG,UAAU,WAGnB,kBAACI,EAAA,EAAD,KACK,kBAACE,EAAA,EAAD,CAAKV,UAAU,aACX,yBAAKA,UAAU,oBACX,yBAAKW,MAAM,yBAGf,yBAAKX,UAAU,oBACX,yBAAKW,MAAM,yBAGf,yBAAKX,UAAU,oBACX,yBAAKW,MAAM,yBAGf,yBAAKX,UAAU,oBACX,yBAAKW,MAAM,yBAGf,yBAAKX,UAAU,oBACX,yBAAKW,MAAM,yBAGf,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,wB,GAxCFN,a,QCkBdO,E,uKAhBb,OAEE,kBAACC,EAAA,EAAD,CAAWJ,OAAK,EAACT,UAAU,gBACzB,yBAAKA,UAAU,UACb,wBAAIA,UAAU,SAAd,iBAGF,kBAAC,EAAD,W,GAVaK,a,eCSJS,E,uKARb,OACE,kBAAC,IAAD,CAAQC,SAAS,KACZ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,S,GAJxBP,aCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e18a73d7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Animation.css';\n\nexport default class Card extends Component {\n    constructor(props) {\n        super(props);\n        this.wrapperRef = React.createRef();\n    }\n\n    handleClick() {\n        const wrapper = this.wrapperRef.current;\n        wrapper.classList.toggle('is-nav-open')\n    }\n\n    render() {\n        return(\n            <div>\n            <div>\n                <div ref={this.wrapperRef} className={this.props.wrapper}>\n                    <div className=\"nav\">\n                        <div className=\"card-body\">\n\n                            I study the future of the space industry. \n\n                            <br></br>\n                            <br></br>\n\n                            Currently, I split my time between the MIT Media Lab's Space Exploration Initiative, where I lead our\n                            Lunar Exploration projects, and Harvard Business School, where I write cases about the space industry.\n\n                            <br></br>\n                            <br></br>\n\n                            I developed a love for space at Wellesley College, where I graduated with a degree in Physics in 2018. After graduating,\n                            I spent a year abroad on the Knafel Traveling Research Fellowship, studying the space industry in 10 countries. Read my blog\n                            from my time abroad here.\n\n                            <br></br>\n                            <br></br>\n\n                            I'm passionate about democratizing access to space, and proud to work towards that goal with other young, passionate individuals in the space industry as the Strategic Partnerships co-coordinator\n                            of the Space Generation Advisory Council. \n\n                            <br></br>\n                            <br></br>\n\n                        </div>\n                </div>\n            </div>\n        </div>\n\n        <button\n            className=\"nav__icon\"\n            onClick={() => this.handleClick()}>{this.props.cardtitle}</button>\n        </div>\n        )\n    }\n\n};","import React, { Component } from 'react';\nimport './StarBackground.css';\nimport {Row, Col} from \"react-bootstrap\";\nimport Card from './Animation.js';\n\n\nclass StarBackground extends Component {\n    render() {\n    \n    return (\n        <React.Fragment>\n            \n\n        <Row className=\"body\" fluid>\n            \n            <Col className=\"card-column\"> \n                <Card \n                    wrapper=\"wrapper wrapper-1\"\n                    cardtitle=\"About\"\n                    />\n            </Col>\n           <Row>\n                <Col className=\"night-sky\">   \n                    <div className=\"star-container-1\">\n                        <div class='star twinkle-star-1'></div>\n                    </div>\n\n                    <div className=\"star-container-2\">\n                        <div class='star twinkle-star-2'></div>\n                    </div>\n                    \n                    <div className=\"star-container-3\">\n                        <div class='star twinkle-star-3'></div>\n                    </div>\n\n                    <div className=\"star-container-4\">\n                        <div class='star twinkle-star-4'></div>\n                    </div>\n\n                    <div className=\"star-container-5\">\n                        <div class='star twinkle-star-5'></div>\n                    </div>\n\n                    <div class='line line-1'></div>\n                    <div class='line line-2'></div>\n                    <div class='line line-3'></div>\n                    <div class='line line-4'></div>\n                </Col>\n            </Row>\n            </Row>\n            </React.Fragment>\n\n        )\n    }\n};\n\nexport default StarBackground;","import React, { Component } from 'react';\nimport './Home.css';\nimport StarBackground from \"./Components/StarBackground\";\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nclass Home extends Component {\n  render() {\n    \n  return (\n\n    <Container fluid className=\"website-body\">\n      <div className=\"Header\">\n        <h1 className=\"Title\">Mehak Sarang</h1>\n      </div>\n\n      <StarBackground />\n         \n    </Container>\n\n\n  );\n}\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {   \n  return (\n    <Router basename=\"/\">\n         <Route exact path=\"/\" component={Home} />\n   </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}